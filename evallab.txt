// https://cs.lmu.edu/~ray/notes/openglexamples/

#include "./freeglut-3.2.1/include/GL/freeglut.h"
#include <GL/glut.h>
#include <iostream>
using namespace std;

// void display(void) {
// 	glClear(GL_COLOR_BUFFER_BIT);
// 	glLineWidth(16.0);
// 	glBegin(GL_LINES);
// 	glVertex2i(110,100);
// 	glVertex2i(250,100);
  
//   glVertex2i(110,200);
// 	glVertex2i(250,200);

//   glVertex2i(110,200);
// 	glVertex2i(110,100);

//   glVertex2i(110,100);
// 	glVertex2i(250,200);
  
//   glVertex2i(250,200);
// 	glVertex2i(250,100);
  
// 	glEnd();
	

	
// 	glFlush();
// }

// void myInit(void) {
// 	glClearColor(0.0, 1.0, 1.0, 0.0);
// 	glColor3f(1.0, 1.0, 0.0);
// 	glMatrixMode(GL_PROJECTION);
// 	gluOrtho2D(0.0, 500.0, 0.0, 400.0);}
// // }ï¿¼    float p1 = ry * ry - (rx * rx)* ry + (rx * rx) * (0.25) ;


// int main(int argc, char **argv) {
// 	glutInit(&argc, argv);
// 	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
// 	glutInitWindowSize(200, 300);
// 	glutInitWindowPosition(500, 100);
// 	glutCreateWindow("Hello Students");
// 	glutDisplayFunc(display);
// 	myInit();
// 	glutMainLoop();
// }










// int pntX1, pntY1, r;

// void plot(int x, int y)
// {
// 	glBegin(GL_POINTS);
// 	glVertex2i(x+pntX1, y+pntY1);
// 	glEnd();
// }


// void myInit (void)
// {
// 	glClearColor(1.0, 1.0, 1.0, 0.0);
// 	glColor3f(0.0f, 0.0f, 0.0f);
// 	glPointSize(4.0);
// 	glMatrixMode(GL_PROJECTION);
// 	glLoadIdentity();
// 	gluOrtho2D(0.0, 640.0, 0.0, 480.0);
// }


// void midPointCircleAlgo()
// {
// 	int x = 0;
// 	int y = r;
// 	float decision = 5/4 - r;
// 	plot(x, y);

// 	while (y >= x)
// 	{
// 		if (decision < 0)
// 		{
// 			x++; 
// 			decision += 2*x+1;
// 		}
// 		else
// 		{
// 			y--;
// 			x++;
// 			decision += 2*(x-y)+1;
// 		}
//     plot(-x, -y);
// 		plot(x, y);
// 		plot(x, -y);
// 		plot(-x, y);
		
// 		plot(y, x);
// 		plot(-y, x);
// 		plot(y, -x);
// 		plot(-y, -x);
// 	}

// }

// void myDisplay(void)
// {
// 	glClear (GL_COLOR_BUFFER_BIT);
// 	glColor3f (100.0, 0.0, 0.0);
// 	glPointSize(1.0);

// 	midPointCircleAlgo();

// 	glFlush ();
// }

// int main(int argc, char** argv)
// {	
// 	cout << "Enter the coordinates of the center:\n\n" << endl;

// 	cout << "X-coordinate   : "; cin >> pntX1;
// 	cout << "\nY-coordinate : "; cin >> pntY1;
// 	cout << "\nEnter radius : "; cin >> r;


// 	glutInit(&argc, argv);
// 	glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
// 	glutInitWindowSize (640, 480);
// 	glutInitWindowPosition (100, 150);
// 	glutCreateWindow ("Line Drawing ");
// 	glutDisplayFunc(myDisplay);
// 	myInit ();
// 	glutMainLoop();
  

// }
// }










int rx,ry;
int xCenter,yCenter;
void myinit(void)
{
 glClearColor(1.0,1.0,1.0,0.0);
 glMatrixMode(GL_PROJECTION);
 glLoadIdentity();
 gluOrtho2D (0.0,640.0,0.0,480.0);
 }
 void setPixel(GLint x,GLint y)
{
  glBegin(GL_POINTS);
     glVertex2i(x,y);
  glEnd();
}

void ellipseMidPoint()
{
    //int xCenter = 250;
    //int yCenter = 300;
    //int rx = 200;
    //int ry = 200;

    
    float x = 0;
    float y = ry;
    float p1 = ry * ry - (rx * rx)* ry + (rx * rx) * (0.25) ;
    
    float dx = 2 * (ry * ry) * x;
    float dy = 2 * (rx * rx) * y;
    while(dx < dy)
    {
        
         setPixel(xCenter + x  ,  yCenter+y);
         setPixel( xCenter - x,   yCenter + y);
         setPixel( xCenter + x  , yCenter - y );
         setPixel( xCenter - x  , yCenter - y);
        if(p1 < 0)
        {
            x = x + 1;
            dx = 2 * (ry * ry) * x;
            p1 = p1 + dx + (ry * ry);
        }
        else
        {
            x = x + 1;
            y = y - 1;
            dx =  2 * (ry * ry) * x;
            dy =  2 * (rx * rx) * y;
             p1 = p1 + dx - dy +(ry * ry);
        }
    }
    
    float p2 = (ry * ry )* ( x +  0.5) * ( x +  0.5) +  ( rx * rx) * ( y - 1) * ( y - 1) - (rx * rx )* (ry * ry);


    while(y > 0)
    {
        
         setPixel(xCenter + x  ,  yCenter+y);
         setPixel( xCenter - x,   yCenter + y);
         setPixel( xCenter + x  , yCenter - y );
         setPixel( xCenter - x  , yCenter - y);    
        if(p2 > 0)
        {
            x = x;
            y = y - 1;
            dy = 2 * (rx * rx) * y;
            
            p2 = p2 - dy + (rx * rx);
        }
        else
        {
            x = x + 1;
            y = y - 1;
            dy = dy - 2 * (rx * rx) ;
            dx = dx + 2 * (ry * ry) ;
            p2 = p2 + dx -
            dy + (rx * rx);
        }
    }

}
void display()
{
     glClear(GL_COLOR_BUFFER_BIT);     
     glColor3f(1.0,0.0,0.0);          
     glPointSize(2.0);               

     

     ellipseMidPoint();
     glFlush(); 
}

int main(int argc,char** argv)
{
    cout<<"\n\nEnter Center Of Ellipse  \n\n";
    cout<<"\n x = ";
    cin>>xCenter;

    cout<<"\n y = ";
    cin>>yCenter;

    cout<<" Enter a Semi Major Axix : ";
    cin>>rx;
    cout<<" \nEnter a Semi Minor Axis: ";
    cin>>ry;
	glutInit(&argc,argv);
    glutInitWindowSize(640,480); 
    glutInitWindowPosition(10,10); 
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutCreateWindow("Midpoint Ellipse Drawing Algorithm");
	myinit();
    glutDisplayFunc(display);
    glutMainLoop();

}






